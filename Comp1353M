/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

vex::controller    Controller1 = vex::controller();


//vex::brain         Brain;

vex::motor  FrontLeft1 = vex::motor(vex::PORT1, vex::gearSetting::ratio18_1, false);
vex::motor  BackLeft2 = vex::motor(vex::PORT2, vex::gearSetting::ratio18_1, false);
vex::motor  FrontRight3 = vex::motor(vex::PORT3, vex::gearSetting::ratio18_1, true);
vex::motor  BackRight4 = vex::motor(vex::PORT4, vex::gearSetting::ratio18_1, true);
vex::motor  Claw9 = vex::motor(vex::PORT9, vex::gearSetting::ratio18_1, false);
vex::motor  DR4Bleft6 = vex::motor(vex::PORT6, vex::gearSetting::ratio36_1, true);
vex::motor  DR4Bright7 = vex::motor(vex::PORT7, vex::gearSetting::ratio36_1, false);

// define your global instances of motors and other devices here


void manualDriveControl(){
  if((abs(Controller1.Axis4.value()) > 20) || (abs(Controller1.Axis3.value()) > 20)){
    int leftSideValue = Controller1.Axis3.value() + Controller1.Axis4.value();
    int rightSideValue = Controller1.Axis3.value() - Controller1.Axis4.value();

    BackLeft2.spin(vex::directionType::fwd, leftSideValue, vex::velocityUnits::pct);
    FrontLeft1.spin(vex::directionType::fwd, leftSideValue, vex::velocityUnits::pct);
    BackRight4.spin(vex::directionType::fwd, rightSideValue, vex::velocityUnits::pct);
    FrontRight3.spin(vex::directionType::fwd, rightSideValue, vex::velocityUnits::pct);
  } 
  else {
    BackLeft2.stop(vex::brakeType::brake);
    BackRight4.stop(vex::brakeType::brake);
    FrontLeft1.stop(vex::brakeType::brake);
    FrontRight3.stop(vex::brakeType::brake);
  }  
}

void manualLiftControl(){
  if(abs(Controller1.Axis2.value()) >15){
    int lift = Controller1.Axis2.value();
    //Arm goes up and down according to whether right stick is up or down respectively
    DR4Bleft6.spin(vex::directionType::fwd, lift, vex::velocityUnits::pct);
    DR4Bright7.spin(vex::directionType::fwd, lift, vex::velocityUnits::pct);
  }
  else {
    DR4Bleft6.stop(vex::brakeType::brake);
    DR4Bright7.stop(vex::brakeType::brake);
  }
}

void manualClawControl(){
  if (Controller1.ButtonL2.pressing()){
     Claw9.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
   } else if (Controller1.ButtonR2.pressing()){
     Claw9.spin(vex::directionType::fwd, -40, vex::velocityUnits::pct);
   } else {
       Claw9.stop(vex::brakeType::brake);
     }
}

void stopAllMotors(){
  FrontLeft1.stop();
  BackLeft2.stop();
  FrontRight3.stop();
  BackRight4.stop();
  DR4Bleft6.stop();
  DR4Bright7.stop();
  Claw9.stop();
}

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................
  Claw9.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
  vex::task::sleep(1000);
  Claw9.stop(vex::brakeType::brake);
  BackLeft2.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
  FrontLeft1.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
  BackRight4.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
  FrontRight3.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
  vex::task::sleep(2000);
  BackLeft2.stop(vex::brakeType::brake);
  BackRight4.stop(vex::brakeType::brake);
  FrontLeft1.stop(vex::brakeType::brake);
  FrontRight3.stop(vex::brakeType::brake);
  Claw9.spin(vex::directionType::fwd, -25, vex::velocityUnits::pct);
  vex::task::sleep(1000);
  Claw9.stop(vex::brakeType::coast);
  vex::task::sleep(1000000000);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................
    manualDriveControl();
    manualLiftControl();
    manualClawControl();

    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(1, msec);
  }
}
